
define('jsmapper/utils',[],function() {

  var utils,
      SLICE = Array.prototype.slice;
  
  return utils = {

    id: (function() {
      var id = 0;
      return function() {
        return (id++).toString();
      }
    })(),

    extend: function(dest) {
      SLICE.call(arguments, 1).forEach(function(src) {
        for (var key in src) {
          if (src.hasOwnProperty(key)) {
            dest[key] = src[key];
          }
        }
      });
      return dest;
    }
  }
});

define('jsmapper/includes',['require'],function(require) {

  var SLICE = Array.prototype.slice,
      extend = function(d, s) {
        for (var k in s) if (s.hasOwnProperty(k) && k !== '_includes') d[k] = s[k];
      }

  return function withIncludes() {

    if (!(this instanceof Function)) return withIncludes.call(arguments[0]);

    this._includes = {
      initializers: []
    }

    this.include = function() {
      SLICE.call(arguments).forEach(function(inc) {
        if (typeof inc === 'function') {
          extend(this, inc);
          extend(this.prototype, inc.prototype);
          this._includes.initializers.push(inc);
        } else {
          extend(this.prototype, inc)
        }
      }, this);

      return this;
    }

    this.applyIncludes = function(instance, args) {
      this._includes.initializers.forEach(function(init) { init.apply(instance, args); });
    }

    return this;
  }

});

define('jsmapper/schema',['require','./utils'],function(require) {

  var utils = require('./utils');

  function Schema(data) {
    this.meta('keys', {});
    this.meta('validations', {});
    this.meta('errors', {});

    this.once('initialized', function() { 
      this.fromJSON(data); 
    }, this);
  }
  
  Schema.prototype = {

    key: function(name, options) {
      options = options || {};
      this._meta.keys[name] = options;
      this[name] = options.default;
      return this;
    },

    validate: function(prop, rule, message) {
      (this._meta.validations[prop] || (this._meta.validations[prop] = [])).push({
        rule: rule,
        message: message
      });
      return this;
    },

   isValid: function() {

      var errors = {},
          isValid = true;

      this.each(function(v, k) {
        if (this._meta.validations[k]) {
          this._meta.validations[k].forEach(function(validation) {
            if (!validation.rule(v)) {
              isValid = false;
              (errors[k] || (errors[k] = [])).push(validation.message);
            }
          });
        }
      });

      this._meta.errors = errors;

      return isValid;
    },

    each: function(fn) {
      for (var key in this) {
        if (this.hasOwnProperty(key) && this._meta.keys[key]) {
          fn.call(this, this[key], key);
        }
      }
    },

    toJSON: function() {

      var data = {};

      this.each(function(v, k) {
        data[k] = v;
      });

      return data;
    },

    fromJSON: function(data) {
      utils.extend(this, data);
    }
  };

  return Schema;
});

define('jsmapper/observable',[],function() {

  var observed = [],
      nextChecks = [],
      onChanges = [];

  function clone(o) {
    if (typeof o === 'object') {
      if (typeof o.length === 'undefined') {
        var c = {};
        for (var k in o) {
          c[k] = clone(o[k]);
        }
        return c;
      } else {
        return o.map(function(i) { return clone(i); } );
      }
    }
    return o;
  }

  function compare(a, b) {
    return JSON.stringify(a) == JSON.stringify(b);
  }

  function check() {
    var o, i, len, change = false;
    for (i = observed.length - 1; i >= 0; i--) {
      o = observed[i];
      a = o.last
      b = o.obj[o.prop];

      if (!compare(a, b)) {
        o.cb.call(o.obj, b, a);
        o.last = clone(o.obj[o.prop]);
        change = true;
      } else if (o.obj.unobservable) {
        observed.splice(i, 1);
      }
    }

    if (change) {
      onChanges.forEach(function(cb) {
        cb();
      });
    }
    while (nextChecks[0]) nextChecks.pop()();
  };

  function generateConfig(scope, args) {
    if (typeof args[0] === 'string') {
      return { obj: scope, prop: args[0], cb: args[1] };
    } else {
      return { obj: args[0], prop: args[1], cb: args[2] };
    }
  }

  return {

    check: check,

    nextCheck: function(cb) {
      nextChecks.push(cb);
    },

    nextCheckOnce: function(cb) {
      if (nextChecks.indexOf(cb) > -1) return;
      nextChecks.push(cb);
    },

    onChange: function(cb) {
      onChanges.push(cb);
    },

    watch: function() {
      var config = generateConfig(this, arguments);
      observed.push(config);
    },

    watchOnce: function() {
      var config = generateConfig(this, arguments);

      function cbOnce() {
        config.cb.apply(this, arguments);
        this.unwatch(prop, cbOnce);
      }

      observed.push({ obj: config.obj, prop: config.prop, cb: cbOnce });
    },

    unwatch: function() {
      var config = generateConfig(this, arguments);

      var i, o;
      for (i = observed.length - 1; i >= 0; i--) {
        o = observed[i];

        if (config.obj) {
          if (o.obj !== config.obj) continue;

          if (config.prop) {
            if (o.prop !== '*' && o.prop !== config.prop) continue;

            if (config.cb) {
              if (o.cb !== config.cb) continue;
            }
          }
        }

        observed.splice(i, 1);
      } 
    },

    link: function(from, to, through) {
      this.watch(from, function(new_val) { 
        this[to] = through.call(this, new_val); 
      });
    }
  };
});

define('jsmapper/events',['require'],function(require) {

  function Event() {
    this.meta('events', {});
  }

  Event.prototype = {
    
    on: function(name, cb, scope) {
      var qs = this.meta('events');
      cb.scope = scope || this;
      (qs[name] || (qs[name] = [])).push(cb);
    },

    once: function(name, cb, scope) {
      var _this = this,
          cbAndRemove = function() {
            _this.off(name, cb);
            cb.apply(scope, arguments);
          }
      this.on(name, cbAndRemove, scope);
    },

    off: function(name, cb) {

      var queue = this.meta('events')[name];
      if (!queue) return;

      if (cb) {
        var index = queue.indexOf(cb);
        if (index > -1) {
          queue.splice(index, 1); 
          if (queue.length === 0) {
            delete this.queues[name];
          }
        }
      } else {
        delete this.meta('events')[name];
      }
    },

    trigger: function(name, data) {

      var queue = this.meta('events')[name];
      if (!queue || !queue.length) return;

      for (var i = queue.length - 1; i >= 0; i--) {
        queue[i].call(queue[i].scope, data);
      }
    }
  }

  return Event;
});

define('jsmapper/resource',['require','jsmapper/utils'],function(require) {

  var utils = require('jsmapper/utils');

  function Resource() {
    this.meta('filters', {
      beforeSave: []
    })
  };

  Resource.prototype = {

    idProperty: 'id',

    isNew: function() {
      return !this[this.idProperty];
    },
    
    save: function(options) {
      if (this.isNew()) {
        this.meta('filters').beforeSave.forEach(function(f) {
          f.call(this);
        }, this);
        return this.sync('create', this, options);
      } else {
        return this.sync('update', this, options);
      }
    },

    load: function(options) {
      return this.sync('read', this, options);
    },

    destroy: function(options) {
      return this.sync('delete', this, options);
    },

    beforeSave: function(fn) {
      this.meta('filters').beforeSave.push(fn);
    }
  };

  Resource.url = '';

  Resource.load = function(options) {
   return this.sync('read', this, options);
  };
  
  return Resource;
});

define('jsmapper/sync',['require','jsmapper/utils'],function(require) {

  var utils = require('jsmapper/utils');

  // partial application to dry up sync
  function createAjax(obj, options) {
    return function(type_options) {
      return $.ajax(
        utils.extend({
          url: urlFor(obj),
          contentType: 'application/json; charset=utf-8',
          converters: {
            'text json': function(data) { 
              data = JSON.parse(data);
              return (data.length) ? data.map(function(d) { return new (typeof obj === 'function' ? obj : obj.constructor)(d); }) : obj.fromJSON(data);
            }
          }
        }, type_options, options)
      )
    }
  }

  function urlFor(obj) {
    var root = typeof obj === 'function' ? obj.url : obj.constructor.url,
        id = obj[obj.idAttribute || 'id'];
    return (id) ? root + '/' + id : root;
  }

  function Syncer() {};

  Syncer.prototype = {
    
    sync: function(type, obj, options) {

      var options = options || {},
          ajax = createAjax(obj, options);

      switch(type) {

        case 'delete':
          return ajax({ type: 'DELETE' });

        case 'create':
          return ajax({
            type: 'POST',
            data: JSON.stringify(obj)
          });

        case 'update':
          return ajax({
            type: 'PUT',
            data: JSON.stringify(obj)
          });

        case 'read':
          return ajax({
            type: 'GET',
            data: options.data
          });
      }
    }
  }

  Syncer.sync = Syncer.prototype.sync;

  return Syncer;
});

define('jsmapper/document',['require','jsmapper/utils','jsmapper/includes','jsmapper/schema','jsmapper/observable','jsmapper/events','jsmapper/resource','jsmapper/sync'],function(require) {

  var utils = require('jsmapper/utils'),
      withIncludes = require('jsmapper/includes'),
      Schema = require('jsmapper/schema'),
      observable = require('jsmapper/observable'),
      Events = require('jsmapper/events'),
      Resource = require('jsmapper/resource'),
      sync = require('jsmapper/sync');

  function Document() {
    this._meta = { id: utils.id() };
    Document.applyIncludes(this, arguments)
  };

  Document.prototype = {
    
    meta: function(name, value) {
      return typeof value === 'undefined' ? this._meta[name] : (this._meta[name] = value);
    }
  };

  withIncludes(Document).include(Resource, Events, Schema, observable, sync);

  return function(Subject) {
    return withIncludes(function Wrapper() {
      Wrapper.applyIncludes(this, arguments);
      this.trigger('initialized');
    }).include(Document, Subject);
  };
});
